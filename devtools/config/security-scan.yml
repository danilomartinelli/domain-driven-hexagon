# Security Scanning Configuration for Domain-Driven Hexagon
# Integrates with Trivy, Docker Scout, and other security tools

# Trivy Configuration
trivy:
  # Vulnerability database
  db:
    repository: "ghcr.io/aquasecurity/trivy-db"
    skip_update: false
    
  # Scanning options
  scan:
    format: "json"
    exit_code: 1
    severity: "HIGH,CRITICAL"
    ignore_unfixed: false
    timeout: "10m"
    
  # Output configuration  
  output:
    template: |
      # Security Scan Report - {{ .ArtifactName }}
      
      ## Summary
      - **Total Vulnerabilities**: {{ len .Results }}
      - **Scan Date**: {{ now | date "2006-01-02 15:04:05" }}
      - **Critical**: {{ .Results | selectattr "Severity" "eq" "CRITICAL" | list | len }}
      - **High**: {{ .Results | selectattr "Severity" "eq" "HIGH" | list | len }}
      
      ## Vulnerabilities
      {{- range .Results }}
      {{- range .Vulnerabilities }}
      ### {{ .VulnerabilityID }} - {{ .Severity }}
      - **Package**: {{ .PkgName }}
      - **Version**: {{ .InstalledVersion }}
      - **Fixed Version**: {{ .FixedVersion }}
      - **Description**: {{ .Description }}
      {{- end }}
      {{- end }}

# Docker Scout Configuration
scout:
  # Enable Docker Scout scanning
  enabled: true
  
  # Policy configuration
  policy:
    # Fail build on high/critical vulnerabilities
    fail_on: ["high", "critical"]
    
    # Policy recommendations
    recommendations: true
    
  # SBOM generation
  sbom:
    enabled: true
    format: "spdx-json"

# Hadolint Configuration (Dockerfile linting)
hadolint:
  # Dockerfile rules
  rules:
    # Error level rules
    error:
      - "DL3000" # Use absolute WORKDIR
      - "DL3001" # For some bash commands it makes no sense running them in a Docker container
      - "DL3002" # Last user should not be root
      - "DL3003" # Use WORKDIR to switch to a directory
      - "DL3004" # Do not use sudo
      - "DL3005" # Do not use apt-get dist-upgrade
      - "DL3006" # Always tag the version of an image explicitly
      - "DL3007" # Using latest is prone to errors
      - "DL3008" # Pin versions in apt-get install
      - "DL3009" # Delete the apt-get lists after installing something
      - "DL3010" # Use ADD for extracting archives into an image
      
    # Warning level rules  
    warning:
      - "DL3013" # Pin versions in pip
      - "DL3014" # Use -y flag with apt-get install
      - "DL3015" # Avoid additional packages by specifying --no-install-recommends
      - "DL3016" # Pin versions in npm
      - "DL3018" # Pin versions in apk add
      - "DL3019" # Use the --no-cache switch
      - "DL3020" # Use COPY instead of ADD for files and folders
      - "DL3021" # COPY with more than 2 arguments requires the last argument to end with /
      - "DL3022" # COPY --from should reference a previously defined FROM alias
      - "DL3023" # COPY --from should reference a previously defined FROM alias
      - "DL3024" # FROM aliases should be unique
      - "DL3025" # Use arguments JSON notation for CMD and ENTRYPOINT arguments

# Container Runtime Security
runtime_security:
  # Security contexts
  security_context:
    # Run as non-root user
    run_as_non_root: true
    run_as_user: 1001
    run_as_group: 1001
    
    # Filesystem permissions
    read_only_root_filesystem: true
    allow_privilege_escalation: false
    
    # Capabilities
    drop_capabilities:
      - "ALL"
    add_capabilities:
      - "NET_BIND_SERVICE"
      
    # Security profiles
    seccomp_profile: "runtime/default"
    apparmor_profile: "runtime/default"
    
  # Network policies
  network_policy:
    # Ingress rules
    ingress:
      - from:
          - podSelector:
              matchLabels:
                app: "nginx"
        ports:
          - protocol: TCP
            port: 3000
            
    # Egress rules
    egress:
      - to:
          - podSelector:
              matchLabels:
                app: "postgres"
        ports:
          - protocol: TCP
            port: 5432
      - to:
          - podSelector:
              matchLabels:
                app: "redis"
        ports:
          - protocol: TCP
            port: 6379

# Secrets Management
secrets:
  # External secrets operator
  external_secrets:
    enabled: true
    provider: "aws" # or "vault", "azure", "gcp"
    
  # Secret scanning
  secret_scanning:
    # TruffleHog configuration
    trufflehog:
      enabled: true
      rules:
        - "aws_access_key"
        - "jwt"
        - "private_key" 
        - "database_url"
        
    # GitLeaks configuration  
    gitleaks:
      enabled: true
      config: ".gitleaks.toml"

# Supply Chain Security
supply_chain:
  # SLSA (Supply Chain Levels for Software Artifacts)
  slsa:
    level: 2 # Target SLSA level
    
  # Sigstore/Cosign signing
  signing:
    enabled: true
    keyless: true # Use keyless signing with OIDC
    
  # SBOM (Software Bill of Materials)
  sbom:
    format: "spdx-json"
    include_dependencies: true
    include_licenses: true
    
# Compliance Standards
compliance:
  # CIS Benchmarks
  cis:
    docker: "1.6.0"
    kubernetes: "1.23"
    
  # NIST Cybersecurity Framework
  nist:
    enabled: true
    controls:
      - "ID.AM" # Asset Management
      - "PR.AC" # Access Control
      - "PR.DS" # Data Security
      - "DE.AE" # Anomalies and Events
      - "RS.RP" # Response Planning
      
  # SOC 2
  soc2:
    enabled: true
    type: 2
    
# Monitoring & Alerting
monitoring:
  # Falco runtime security
  falco:
    enabled: true
    rules:
      - "Terminal shell in container"
      - "File Below a Known Binary Directory"
      - "Modify binary dirs"
      - "Mkdir binary dirs"
      
  # Prometheus security metrics
  prometheus:
    enabled: true
    metrics:
      - "container_vulnerabilities_total"
      - "container_security_violations_total"
      - "container_policy_violations_total"
      
  # Alertmanager configuration
  alerting:
    webhooks:
      - name: "security-alerts"
        url: "https://hooks.slack.com/services/YOUR/SLACK/WEBHOOK"
        
    rules:
      - alert: "CriticalVulnerability"
        expr: "container_vulnerabilities_total{severity='critical'} > 0"
        for: "0m"
        labels:
          severity: "critical"
        annotations:
          summary: "Critical vulnerability detected in {{ $labels.container }}"
          
      - alert: "SecurityPolicyViolation" 
        expr: "container_policy_violations_total > 0"
        for: "5m"
        labels:
          severity: "warning"
        annotations:
          summary: "Security policy violation in {{ $labels.container }}"

# Automated Remediation
remediation:
  # Automatic patching
  auto_patching:
    enabled: false # Enable with caution
    approval_required: true
    patch_window: "02:00-04:00" # UTC
    
  # Policy enforcement
  policy_enforcement:
    # Open Policy Agent (OPA)
    opa:
      enabled: true
      policies:
        - "require-non-root-user"
        - "disallow-privileged-containers"
        - "require-resource-limits"
        - "disallow-host-network"
        
    # Gatekeeper
    gatekeeper:
      enabled: true
      constraint_templates:
        - "K8sRequiredLabels"
        - "K8sRequiredResources" 
        - "K8sDisallowedTags"