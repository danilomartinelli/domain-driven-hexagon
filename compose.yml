# Docker Compose for Domain-Driven Hexagon
# Development environment with PostgreSQL and RabbitMQ

name: 'domain-driven-hexagon'

networks:
  app-network:
    driver: bridge

volumes:
  postgres_data:
    driver: local
  rabbitmq_data:
    driver: local

services:
  # Application service
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: ddh-app
    restart: unless-stopped

    environment:
      NODE_ENV: development
      DATABASE_URL: postgresql://user:password@postgres:5432/ddh
      REDIS_URL: redis://redis:6379
      RABBITMQ_URL: amqp://user:password@rabbitmq:5672
      LOG_LEVEL: debug

    ports:
      - '3000:3000'
      - '9229:9229' # Debug port

    volumes:
      - .:/app
      - /app/node_modules
      - /app/dist

    networks:
      - app-network

    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy

    command: dumb-init npm run start:debug

  # PostgreSQL database
  postgres:
    image: postgres:16-alpine
    container_name: ddh-postgres
    restart: unless-stopped

    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      POSTGRES_DB: ddh
      POSTGRES_INITDB_ARGS: '--auth-host=scram-sha-256'

    ports:
      - '5432:5432'

    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d:ro

    networks:
      - app-network

    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U user -d ddh']
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # RabbitMQ message broker
  rabbitmq:
    image: rabbitmq:3.13-management-alpine
    container_name: ddh-rabbitmq
    restart: unless-stopped

    environment:
      RABBITMQ_DEFAULT_USER: user
      RABBITMQ_DEFAULT_PASS: password
      RABBITMQ_DEFAULT_VHOST: ddh

    ports:
      - '5672:5672' # AMQP port
      - '15672:15672' # Management UI

    volumes:
      - rabbitmq_data:/var/lib/rabbitmq

    networks:
      - app-network

    healthcheck:
      test: ['CMD', 'rabbitmq-diagnostics', 'check_port_connectivity']
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Redis for caching
  redis:
    image: redis:7-alpine
    container_name: ddh-redis
    restart: unless-stopped

    ports:
      - '6379:6379'

    networks:
      - app-network

    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 10s
      timeout: 3s
      retries: 3

    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
