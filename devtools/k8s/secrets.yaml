# ==================================================
# KUBERNETES SECRETS MANAGEMENT
# ==================================================
# NOTE: In production, use external secret management systems like:
# - External Secrets Operator with AWS Secrets Manager/Azure Key Vault/GCP Secret Manager
# - HashiCorp Vault with Vault Secrets Operator
# - Sealed Secrets for GitOps workflows
# - Kubernetes Secrets Store CSI Driver

# This file provides templates - NEVER commit real secrets to git
---
# ==================================================
# APPLICATION SECRETS
# ==================================================
apiVersion: v1
kind: Secret
metadata:
  name: ddh-app-secrets
  namespace: ddh-production
  labels:
    app.kubernetes.io/name: ddh-app
    app.kubernetes.io/component: secrets
type: Opaque
data:
  # Base64 encoded secrets - REPLACE WITH REAL VALUES
  jwt-secret: <BASE64_ENCODED_JWT_SECRET>
  encryption-key: <BASE64_ENCODED_ENCRYPTION_KEY>
  session-secret: <BASE64_ENCODED_SESSION_SECRET>
---
# ==================================================
# DATABASE SECRETS
# ==================================================
apiVersion: v1
kind: Secret
metadata:
  name: ddh-postgres-secrets
  namespace: ddh-production
  labels:
    app.kubernetes.io/name: ddh-postgres
    app.kubernetes.io/component: secrets
type: Opaque
data:
  # PostgreSQL credentials - REPLACE WITH REAL VALUES
  postgres-user: <BASE64_ENCODED_DB_USER>
  postgres-password: <BASE64_ENCODED_DB_PASSWORD>
  postgres-database: <BASE64_ENCODED_DB_NAME>
---
# ==================================================
# REDIS SECRETS
# ==================================================
apiVersion: v1
kind: Secret
metadata:
  name: ddh-redis-secrets
  namespace: ddh-production
  labels:
    app.kubernetes.io/name: ddh-redis
    app.kubernetes.io/component: secrets
type: Opaque
data:
  # Redis authentication - REPLACE WITH REAL VALUES
  redis-password: <BASE64_ENCODED_REDIS_PASSWORD>
---
# ==================================================
# RABBITMQ SECRETS
# ==================================================
apiVersion: v1
kind: Secret
metadata:
  name: ddh-rabbitmq-secrets
  namespace: ddh-production
  labels:
    app.kubernetes.io/name: ddh-rabbitmq
    app.kubernetes.io/component: secrets
type: Opaque
data:
  # RabbitMQ credentials - REPLACE WITH REAL VALUES
  rabbitmq-user: <BASE64_ENCODED_RABBITMQ_USER>
  rabbitmq-password: <BASE64_ENCODED_RABBITMQ_PASSWORD>
  erlang-cookie: <BASE64_ENCODED_ERLANG_COOKIE>
---
# ==================================================
# TLS CERTIFICATES
# ==================================================
apiVersion: v1
kind: Secret
metadata:
  name: ddh-tls-secrets
  namespace: ddh-production
  labels:
    app.kubernetes.io/name: ddh-ingress
    app.kubernetes.io/component: tls
type: kubernetes.io/tls
data:
  # TLS certificate and key - REPLACE WITH REAL VALUES
  tls.crt: <BASE64_ENCODED_TLS_CERTIFICATE>
  tls.key: <BASE64_ENCODED_TLS_PRIVATE_KEY>
---
# ==================================================
# MONITORING SECRETS
# ==================================================
apiVersion: v1
kind: Secret
metadata:
  name: ddh-monitoring-secrets
  namespace: ddh-production
  labels:
    app.kubernetes.io/name: ddh-monitoring
    app.kubernetes.io/component: secrets
type: Opaque
data:
  # Grafana admin password - REPLACE WITH REAL VALUES
  grafana-admin-password: <BASE64_ENCODED_GRAFANA_ADMIN_PASSWORD>
  grafana-secret-key: <BASE64_ENCODED_GRAFANA_SECRET_KEY>
---
# ==================================================
# EXTERNAL SECRETS EXAMPLE (External Secrets Operator)
# ==================================================
# apiVersion: external-secrets.io/v1beta1
# kind: ExternalSecret
# metadata:
#   name: ddh-app-secrets-external
#   namespace: ddh-production
# spec:
#   refreshInterval: 1h
#   secretStoreRef:
#     name: aws-secrets-manager
#     kind: SecretStore
#   target:
#     name: ddh-app-secrets
#     creationPolicy: Owner
#   data:
#   - secretKey: jwt-secret
#     remoteRef:
#       key: ddh/production/jwt-secret
#   - secretKey: encryption-key
#     remoteRef:
#       key: ddh/production/encryption-key
#   - secretKey: session-secret
#     remoteRef:
#       key: ddh/production/session-secret
---
# ==================================================
# SECRET STORE CONFIGURATION (External Secrets Operator)
# ==================================================
# apiVersion: external-secrets.io/v1beta1
# kind: SecretStore
# metadata:
#   name: aws-secrets-manager
#   namespace: ddh-production
# spec:
#   provider:
#     aws:
#       service: SecretsManager
#       region: us-west-2
#       auth:
#         jwt:
#           serviceAccountRef:
#             name: ddh-external-secrets-sa