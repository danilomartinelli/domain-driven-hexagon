# Ultra Docker Compose for Domain-Driven Hexagon
# Features: Performance tuning, resource limits, health checks, monitoring
# Usage: docker compose -f compose.yml up -d

name: 'ddh'

# Optimized networks with custom configuration
networks:
  app-network:
    driver: bridge
    driver_opts:
      com.docker.network.bridge.name: ddh-bridge
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/16
          gateway: 172.20.0.1

  monitoring-network:
    driver: bridge
    internal: true

# Optimized volumes with performance settings
volumes:
  postgres_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/data/postgres

  rabbitmq_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/data/rabbitmq

  redis_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/data/redis

  # Build cache volume for faster rebuilds
  build_cache:
    driver: local

services:
  # =============================================================================
  # APPLICATION SERVICE - Optimized NestJS application
  # =============================================================================
  app:
    build:
      context: .
      dockerfile: devtools/Dockerfile
      target: ${BUILD_TARGET:-development}
      cache_from:
        - ddh-app:cache
      args:
        BUILDKIT_INLINE_CACHE: 1
      # Use BuildKit for faster builds and advanced features

    image: ddh-app
    container_name: ddh-app
    hostname: ddh-app
    restart: unless-stopped

    # Environment variables from .env file
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      LOG_LEVEL: ${LOG_LEVEL:-debug}
      
      # Database Configuration
      DATABASE_URL: ${DATABASE_URL:-postgresql://user:password@postgres:5432/ddh}
      DB_HOST: ${DB_HOST:-postgres}
      DB_PORT: ${DB_PORT:-5432}
      DB_USERNAME: ${DB_USERNAME:-user}
      DB_PASSWORD: ${DB_PASSWORD:-password}
      DB_NAME: ${DB_NAME:-ddh}
      DB_SSL: ${DB_SSL:-false}
      
      # Redis Configuration
      REDIS_URL: ${REDIS_URL:-redis://redis:6379}
      REDIS_HOST: ${REDIS_HOST:-redis}
      REDIS_PORT: ${REDIS_PORT:-6379}
      
      # RabbitMQ Configuration
      RABBITMQ_URL: ${RABBITMQ_URL:-amqp://user:password@rabbitmq:5672}
      RABBITMQ_HOST: ${RABBITMQ_HOST:-rabbitmq}
      RABBITMQ_PORT: ${RABBITMQ_PORT:-5672}
      
      # Performance optimizations
      NODE_OPTIONS: ${NODE_OPTIONS:---max-old-space-size=1024 --enable-source-maps}
      UV_THREADPOOL_SIZE: ${UV_THREADPOOL_SIZE:-128}
      
      # Security settings
      NODE_TLS_REJECT_UNAUTHORIZED: ${NODE_TLS_REJECT_UNAUTHORIZED:-1}
      JWT_SECRET: ${JWT_SECRET:-your-super-secret-jwt-key-change-this-in-production}
      
      # Health Check Configuration
      HEALTH_CHECK_INTERVAL: ${HEALTH_CHECK_INTERVAL:-30s}
      
      # Monitoring
      METRICS_ENABLED: ${METRICS_ENABLED:-true}
      METRICS_PATH: ${METRICS_PATH:-/metrics}
      
      # Feature Flags
      FEATURE_MONITORING_ENABLED: ${FEATURE_MONITORING_ENABLED:-true}
      FEATURE_DEBUG_MODE_ENABLED: ${FEATURE_DEBUG_MODE_ENABLED:-false}

    # Optimized port mapping
    ports:
      - '3000:3000'
      - '9229:9229' # Debug port (only in development)

    # Optimized volume mounts
    volumes:
      # Development hot reload (only in development)
      - type: bind
        source: .
        target: /app
        consistency: cached
        read_only: false
        bind:
          propagation: rprivate

      # Persistent node_modules
      - type: volume
        source: build_cache
        target: /app/node_modules

      # Logs volume
      - type: bind
        source: ./logs
        target: /app/logs
        consistency: consistent

    networks:
      - app-network

    # Resource limits for optimal performance
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 1G
          pids: 1000
        reservations:
          cpus: '1.0'
          memory: 512M

    # Optimized health check
    healthcheck:
      test:
        [
          'CMD',
          'node',
          '-e',
          "require('http').get('http://localhost:3000/health',(r)=>process.exit(r.statusCode===200?0:1)).on('error',()=>process.exit(1))",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

    # Dependency management with health checks
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy

    # Optimized logging
    logging:
      driver: json-file
      options:
        max-size: '10m'
        max-file: '3'
        compress: 'true'

  # =============================================================================
  # POSTGRESQL - Optimized database configuration
  # =============================================================================
  postgres:
    image: postgres:16-alpine
    container_name: ddh-postgres
    hostname: postgres
    restart: unless-stopped

    # Optimized PostgreSQL configuration
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      POSTGRES_DB: ddh
      POSTGRES_INITDB_ARGS: '--auth-host=scram-sha-256 --auth-local=scram-sha-256'

      # Performance tuning
      POSTGRES_SHARED_BUFFERS: 256MB
      POSTGRES_EFFECTIVE_CACHE_SIZE: 1GB
      POSTGRES_MAINTENANCE_WORK_MEM: 64MB
      POSTGRES_CHECKPOINT_COMPLETION_TARGET: 0.9
      POSTGRES_WAL_BUFFERS: 16MB
      POSTGRES_DEFAULT_STATISTICS_TARGET: 100

    ports:
      - '5432:5432'

    volumes:
      - type: volume
        source: postgres_data
        target: /var/lib/postgresql/data

      # Custom PostgreSQL configuration
      - type: bind
        source: ./database/postgresql.conf
        target: /var/lib/postgresql/data/postgresql.conf
        read_only: true

      # Initialization scripts
      - type: bind
        source: ./database/init
        target: /docker-entrypoint-initdb.d
        read_only: true

    networks:
      app-network:
        ipv4_address: 172.20.0.10

    # Resource optimization for PostgreSQL
    deploy:
      resources:
        limits:
          cpus: '1.5'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M

    # Optimized health check
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U user -d ddh']
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

    # PostgreSQL optimization command
    command: >
      postgres
      -c shared_buffers=256MB
      -c effective_cache_size=1GB
      -c maintenance_work_mem=64MB
      -c checkpoint_completion_target=0.9
      -c wal_buffers=16MB
      -c default_statistics_target=100
      -c random_page_cost=1.1
      -c effective_io_concurrency=200
      -c work_mem=4MB
      -c min_wal_size=1GB
      -c max_wal_size=4GB

  # =============================================================================
  # REDIS - High-performance caching
  # =============================================================================
  redis:
    image: redis:7-alpine
    container_name: ddh-redis
    hostname: redis
    restart: unless-stopped

    ports:
      - '6379:6379'

    volumes:
      - type: volume
        source: redis_data
        target: /data

      # Custom Redis configuration
      - type: bind
        source: ./config/redis.conf
        target: /usr/local/etc/redis/redis.conf
        read_only: true

    networks:
      app-network:
        ipv4_address: 172.20.0.11

    # Resource limits for Redis
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.2'
          memory: 256M

    # Optimized health check
    healthcheck:
      test: ['CMD', 'redis-cli', '--raw', 'incr', 'ping']
      interval: 10s
      timeout: 3s
      retries: 3
      start_period: 10s

    # Optimized Redis configuration
    command: >
      redis-server
      --appendonly yes
      --maxmemory 256mb
      --maxmemory-policy allkeys-lru
      --save 900 1
      --save 300 10
      --save 60 10000
      --tcp-keepalive 300
      --timeout 0
      --databases 16
      --maxclients 10000

  # =============================================================================
  # RABBITMQ - Message broker with management
  # =============================================================================
  rabbitmq:
    image: rabbitmq:3.13-management-alpine
    container_name: ddh-rabbitmq
    hostname: rabbitmq
    restart: unless-stopped

    environment:
      RABBITMQ_DEFAULT_USER: user
      RABBITMQ_DEFAULT_PASS: password
      RABBITMQ_DEFAULT_VHOST: ddh

      # Performance tuning
      RABBITMQ_VM_MEMORY_HIGH_WATERMARK: 0.6
      RABBITMQ_DISK_FREE_LIMIT: 1GB
      RABBITMQ_SERVER_START_ARGS: '-rabbit consumer_timeout 31622400000'

    ports:
      - '5672:5672' # AMQP port
      - '15672:15672' # Management UI

    volumes:
      - type: volume
        source: rabbitmq_data
        target: /var/lib/rabbitmq

      # Custom RabbitMQ configuration
      - type: bind
        source: ./config/rabbitmq.conf
        target: /etc/rabbitmq/rabbitmq.conf
        read_only: true

    networks:
      app-network:
        ipv4_address: 172.20.0.12

    # Resource optimization
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 512M
        reservations:
          cpus: '0.3'
          memory: 256M

    # Optimized health check
    healthcheck:
      test: ['CMD', 'rabbitmq-diagnostics', 'check_port_connectivity']
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # =============================================================================
  # NGINX - Reverse proxy and load balancer (Production)
  # =============================================================================
  nginx:
    image: nginx:alpine
    container_name: ddh-nginx
    hostname: nginx
    restart: unless-stopped
    profiles: ['production']

    ports:
      - '80:80'
      - '443:443'

    volumes:
      # Nginx configuration
      - type: bind
        source: ./config/nginx/nginx.conf
        target: /etc/nginx/nginx.conf
        read_only: true

      # SSL certificates (for production)
      - type: bind
        source: ./ssl
        target: /etc/nginx/ssl
        read_only: true

    networks:
      - app-network

    # Resource limits
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.1'
          memory: 128M

    # Health check
    healthcheck:
      test: ['CMD', 'nginx', '-t']
      interval: 30s
      timeout: 3s
      retries: 3

    depends_on:
      - app

  # =============================================================================
  # MONITORING - Prometheus & Grafana (Optional)
  # =============================================================================
  prometheus:
    image: prom/prometheus:latest
    container_name: ddh-prometheus
    hostname: prometheus
    restart: unless-stopped
    profiles: ['monitoring']

    ports:
      - '9090:9090'

    volumes:
      - type: bind
        source: ./monitoring/prometheus.yml
        target: /etc/prometheus/prometheus.yml
        read_only: true

    networks:
      - monitoring-network
      - app-network

    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'

  grafana:
    image: grafana/grafana:latest
    container_name: ddh-grafana
    hostname: grafana
    restart: unless-stopped
    profiles: ['monitoring']

    ports:
      - '3001:3000'

    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin123
      GF_USERS_ALLOW_SIGN_UP: 'false'

    volumes:
      - type: bind
        source: ./monitoring/grafana/dashboards
        target: /var/lib/grafana/dashboards

      - type: bind
        source: ./monitoring/grafana/provisioning
        target: /etc/grafana/provisioning

    networks:
      - monitoring-network

    depends_on:
      - prometheus

# =============================================================================
# ADDITIONAL CONFIGURATIONS
# =============================================================================

# X-ray performance tracing (for AWS environments)
x-logging: &default-logging
  driver: json-file
  options:
    max-size: '10m'
    max-file: '3'
    compress: 'true'

# Security configurations
x-security: &default-security
  cap_drop:
    - ALL
  cap_add:
    - NET_BIND_SERVICE
  security_opt:
    - no-new-privileges:true
  read_only: true
  tmpfs:
    - /tmp:noexec,nosuid,size=100m
