# Production-Optimized Docker Compose for Domain-Driven Hexagon
version: '3.9'

name: ddh-production

x-common-variables: &common-variables
  NODE_ENV: production
  DATABASE_URL: postgresql://user:password@postgres:5432/ddh
  REDIS_URL: redis://redis:6379

x-restart-policy: &restart-policy
  restart: unless-stopped

x-logging: &default-logging
  logging:
    driver: "json-file"
    options:
      max-size: "100m"
      max-file: "3"

networks:
  app-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
  db-network:
    driver: bridge
    internal: true

volumes:
  postgres-data:
    driver: local
  redis-data:
    driver: local

services:
  # Application Service - NestJS with optimizations
  app:
    build:
      context: ..
      dockerfile: docker/Dockerfile.prod
      cache_from:
        - node:20-alpine
        - ${APP_IMAGE:-ddh/app}:latest
      args:
        NODE_ENV: production
    image: ${APP_IMAGE:-ddh/app}:${VERSION:-latest}
    container_name: ddh-app
    <<: *restart-policy
    <<: *default-logging
    
    # Security Configuration
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp:noexec,nosuid,size=50m
      - /var/cache/nginx:noexec,nosuid,size=10m
    
    # Resource Limits
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 1G
          pids: 100
        reservations:
          cpus: '0.5'
          memory: 512M
    
    # Health Checks
    healthcheck:
      test: ["CMD", "node", "healthcheck.js"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    
    # Environment
    environment:
      <<: *common-variables
      APP_PORT: 3000
      LOG_LEVEL: warn
      WORKERS: 4
    
    # Networking
    networks:
      - app-network
      - db-network
    ports:
      - "127.0.0.1:3000:3000"
    
    # Dependencies
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    
    volumes:
      - type: tmpfs
        target: /app/logs
        tmpfs:
          size: 100M

  # PostgreSQL with optimizations
  postgres:
    image: postgres:16-alpine
    container_name: ddh-postgres
    <<: *restart-policy
    <<: *default-logging
    
    # Security
    security_opt:
      - no-new-privileges:true
    
    # Resource Limits
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
    
    # Environment
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-password}
      POSTGRES_DB: ddh
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256 --auth-local=scram-sha-256"
      # Performance tuning
      POSTGRES_SHARED_BUFFERS: 128MB
      POSTGRES_EFFECTIVE_CACHE_SIZE: 256MB
      POSTGRES_CHECKPOINT_COMPLETION_TARGET: 0.9
      POSTGRES_WAL_BUFFERS: 16MB
      POSTGRES_DEFAULT_STATISTICS_TARGET: 100
    
    # Health Check
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d ddh"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    
    # Storage
    volumes:
      - postgres-data:/var/lib/postgresql/data:Z
      - ../database/init:/docker-entrypoint-initdb.d:ro
    
    # Networking
    networks:
      - db-network
    
    # PostgreSQL Configuration
    command: >
      postgres
      -c shared_preload_libraries=pg_stat_statements
      -c pg_stat_statements.max=10000
      -c pg_stat_statements.track=all
      -c log_statement=mod
      -c log_min_duration_statement=1000
      -c log_line_prefix='%t [%p]: user=%u,db=%d,app=%a,client=%h '
      -c log_checkpoints=on
      -c log_connections=on
      -c log_disconnections=on

  # Redis for caching and sessions
  redis:
    image: redis:7-alpine
    container_name: ddh-redis
    <<: *restart-policy
    <<: *default-logging
    
    # Security
    security_opt:
      - no-new-privileges:true
    read_only: true
    
    # Resource Limits
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.1'
          memory: 64M
    
    # Health Check
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3
      start_period: 10s
    
    # Storage
    volumes:
      - redis-data:/data:Z
      - type: tmpfs
        target: /tmp
        tmpfs:
          size: 10M
    
    # Networking
    networks:
      - db-network
    
    # Redis Configuration
    command: >
      redis-server
      --maxmemory 200mb
      --maxmemory-policy allkeys-lru
      --appendonly yes
      --appendfsync everysec
      --save 300 10
      --tcp-keepalive 60
      --timeout 300

  # PgAdmin (Development/Staging only)
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: ddh-pgadmin
    profiles:
      - development
      - staging
    <<: *restart-policy
    <<: *default-logging
    
    # Security
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp:noexec,nosuid,size=50m
      - /var/lib/pgadmin:size=100m
    
    # Resource Limits
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.1'
          memory: 128M
    
    # Environment
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@ddh.local
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD:-admin}
      PGADMIN_CONFIG_SERVER_MODE: 'False'
      PGADMIN_CONFIG_MASTER_PASSWORD_REQUIRED: 'False'
    
    # Networking
    networks:
      - app-network
      - db-network
    ports:
      - "127.0.0.1:5050:80"
    
    # Dependencies
    depends_on:
      postgres:
        condition: service_healthy

  # Nginx reverse proxy (Production)
  nginx:
    image: nginx:alpine
    container_name: ddh-nginx
    profiles:
      - production
    <<: *restart-policy
    <<: *default-logging
    
    # Security
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /var/cache/nginx:noexec,nosuid,size=50m
      - /var/run:noexec,nosuid,size=10m
    
    # Resource Limits
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 128M
        reservations:
          cpus: '0.1'
          memory: 64M
    
    # Configuration
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ../ssl:/etc/nginx/ssl:ro
    
    # Networking
    networks:
      - app-network
    ports:
      - "80:80"
      - "443:443"
    
    # Dependencies
    depends_on:
      app:
        condition: service_healthy
    
    # Health Check
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 10s