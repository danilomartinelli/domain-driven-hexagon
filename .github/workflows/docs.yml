name: Documentation Generation and Deployment

on:
  push:
    branches:
      - main
      - develop
    paths:
      - 'src/**'
      - 'docs/**'
      - 'README.md'
      - 'package.json'
      - '.github/workflows/docs.yml'
  pull_request:
    branches:
      - main
      - develop
    paths:
      - 'src/**'
      - 'docs/**'
      - 'README.md'
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "docs-${{ github.ref }}"
  cancel-in-progress: true

jobs:
  generate-docs:
    name: Generate Documentation
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '24'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Setup PostgreSQL for OpenAPI generation
        uses: harmon758/postgresql-action@v1
        with:
          postgresql version: '16'
          postgresql db: 'test_db'
          postgresql user: 'test_user'
          postgresql password: 'test_password'

      - name: Wait for PostgreSQL
        run: |
          until pg_isready -h localhost -p 5432 -U test_user; do
            echo "Waiting for PostgreSQL..."
            sleep 2
          done

      - name: Run database migrations
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_db
          NODE_ENV: test
        run: |
          npm run migration:up

      - name: Generate OpenAPI specification
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_db
          NODE_ENV: development
          PORT: 3000
        run: |
          # Start the application in background
          npm run start:dev &
          APP_PID=$!

          # Wait for the application to start
          echo "Waiting for application to start..."
          for i in {1..60}; do
            if curl -s http://localhost:3000/health > /dev/null; then
              echo "Application is ready!"
              break
            fi
            if [ $i -eq 60 ]; then
              echo "Application failed to start"
              exit 1
            fi
            sleep 2
          done

          # Generate OpenAPI spec
          mkdir -p docs/api/generated
          curl -s http://localhost:3000/api-json > docs/api/generated/openapi.json

          # Kill the application
          kill $APP_PID

      - name: Install documentation tools
        run: |
          npm install -g @redocly/cli
          npm install -g swagger-codegen-cli

      - name: Generate API documentation
        run: |
          # Generate ReDoc HTML
          redocly build-docs docs/api/generated/openapi.json \
            --output docs/api/generated/index.html \
            --title "Domain-Driven Hexagon API" \
            --theme.colors.primary.main="#2563eb"

          # Generate Swagger UI
          mkdir -p docs/api/generated/swagger-ui
          npx swagger-ui-dist-cli \
            --file docs/api/generated/openapi.json \
            --output docs/api/generated/swagger-ui

      - name: Generate TypeScript SDK
        run: |
          mkdir -p docs/api/generated/sdk/typescript

          swagger-codegen generate \
            -i docs/api/generated/openapi.json \
            -l typescript-fetch \
            -o docs/api/generated/sdk/typescript \
            --additional-properties=npmName=domain-driven-hexagon-client,npmVersion=1.0.0

      - name: Generate Python SDK
        run: |
          mkdir -p docs/api/generated/sdk/python

          swagger-codegen generate \
            -i docs/api/generated/openapi.json \
            -l python \
            -o docs/api/generated/sdk/python \
            --additional-properties=packageName=domain_driven_hexagon_client,packageVersion=1.0.0

      - name: Generate architecture diagrams
        run: |
          # Install Mermaid CLI
          npm install -g @mermaid-js/mermaid-cli

          # Create diagrams directory
          mkdir -p docs/architecture/generated/diagrams

          # Generate diagrams from mermaid files
          find docs/architecture -name "*.mermaid" -exec mmdc -i {} -o docs/architecture/generated/diagrams/{}.png \;

      - name: Generate code coverage badge
        if: github.ref == 'refs/heads/main'
        run: |
          # Run tests with coverage
          npm run test:cov

          # Generate coverage badge
          npx coverage-badges-cli \
            --source coverage/coverage-summary.json \
            --output docs/badges/coverage.svg

      - name: Lint documentation
        run: |
          # Install markdownlint
          npm install -g markdownlint-cli

          # Lint markdown files
          markdownlint docs/**/*.md README.md --config .markdownlint.json || true

      - name: Generate documentation index
        run: |
          cat > docs/index.html << 'EOF'
          <!DOCTYPE html>
          <html lang="en">
          <head>
              <meta charset="UTF-8">
              <meta name="viewport" content="width=device-width, initial-scale=1.0">
              <title>Domain-Driven Hexagon Documentation</title>
              <style>
                  body {
                      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
                      line-height: 1.6;
                      color: #333;
                      max-width: 1200px;
                      margin: 0 auto;
                      padding: 2rem;
                      background: #f8fafc;
                  }
                  .header {
                      text-align: center;
                      margin-bottom: 3rem;
                      padding: 2rem;
                      background: white;
                      border-radius: 8px;
                      box-shadow: 0 2px 10px rgba(0,0,0,0.1);
                  }
                  .header h1 {
                      color: #2563eb;
                      margin: 0;
                      font-size: 2.5rem;
                  }
                  .header p {
                      color: #64748b;
                      margin: 1rem 0 0 0;
                      font-size: 1.2rem;
                  }
                  .grid {
                      display: grid;
                      grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
                      gap: 2rem;
                  }
                  .card {
                      background: white;
                      padding: 1.5rem;
                      border-radius: 8px;
                      box-shadow: 0 2px 10px rgba(0,0,0,0.1);
                      transition: transform 0.2s;
                  }
                  .card:hover {
                      transform: translateY(-4px);
                  }
                  .card h3 {
                      color: #1e293b;
                      margin-top: 0;
                      border-bottom: 2px solid #e2e8f0;
                      padding-bottom: 0.5rem;
                  }
                  .card ul {
                      list-style: none;
                      padding: 0;
                  }
                  .card li {
                      margin: 0.5rem 0;
                  }
                  .card a {
                      color: #2563eb;
                      text-decoration: none;
                      font-weight: 500;
                  }
                  .card a:hover {
                      text-decoration: underline;
                  }
                  .badges {
                      text-align: center;
                      margin: 2rem 0;
                  }
                  .badges img {
                      margin: 0 0.5rem;
                  }
              </style>
          </head>
          <body>
              <div class="header">
                  <h1>Domain-Driven Hexagon</h1>
                  <p>Comprehensive Documentation Hub</p>
                  <div class="badges">
                      <img src="https://img.shields.io/badge/TypeScript-5.9-blue.svg" alt="TypeScript">
                      <img src="https://img.shields.io/badge/NestJS-11.1-red.svg" alt="NestJS">
                      <img src="https://img.shields.io/badge/PostgreSQL-16-blue.svg" alt="PostgreSQL">
                      <img src="badges/coverage.svg" alt="Coverage" onerror="this.style.display='none'">
                  </div>
              </div>

              <div class="grid">
                  <div class="card">
                      <h3>üöÄ Getting Started</h3>
                      <ul>
                          <li><a href="guides/GETTING_STARTED.html">Getting Started Guide</a></li>
                          <li><a href="../README.html">Project README</a></li>
                          <li><a href="../CLAUDE.html">Development Commands</a></li>
                      </ul>
                  </div>

                  <div class="card">
                      <h3>üèóÔ∏è Architecture</h3>
                      <ul>
                          <li><a href="architecture/ARCHITECTURE.html">System Architecture</a></li>
                          <li><a href="architecture/domain-model.html">Domain Model</a></li>
                          <li><a href="architecture/generated/diagrams/">Architecture Diagrams</a></li>
                      </ul>
                  </div>

                  <div class="card">
                      <h3>üìö API Documentation</h3>
                      <ul>
                          <li><a href="api/API_GUIDE.html">API Guide</a></li>
                          <li><a href="api/generated/index.html">Interactive API Docs (ReDoc)</a></li>
                          <li><a href="api/generated/swagger-ui/index.html">Swagger UI</a></li>
                          <li><a href="api/generated/openapi.json">OpenAPI Specification</a></li>
                      </ul>
                  </div>

                  <div class="card">
                      <h3>üõ†Ô∏è Development</h3>
                      <ul>
                          <li><a href="guides/DEVELOPMENT_BEST_PRACTICES.html">Best Practices</a></li>
                          <li><a href="../docs/DEVELOPER_GUIDE.html">Developer Guide</a></li>
                          <li><a href="../tests/">Test Documentation</a></li>
                      </ul>
                  </div>

                  <div class="card">
                      <h3>üì¶ Client SDKs</h3>
                      <ul>
                          <li><a href="api/generated/sdk/typescript/">TypeScript SDK</a></li>
                          <li><a href="api/generated/sdk/python/">Python SDK</a></li>
                          <li><a href="api/API_GUIDE.html#code-examples">Code Examples</a></li>
                      </ul>
                  </div>

                  <div class="card">
                      <h3>üöÄ Deployment</h3>
                      <ul>
                          <li><a href="../docs/PRODUCTION_DEPLOYMENT_GUIDE.html">Production Deployment</a></li>
                          <li><a href="../devtools/README.html">DevOps Tools</a></li>
                          <li><a href="../docker-compose.yml">Docker Configuration</a></li>
                      </ul>
                  </div>
              </div>
          </body>
          </html>
          EOF

      - name: Convert markdown to HTML
        run: |
          # Install markdown to HTML converter
          npm install -g marked

          # Convert all markdown files to HTML
          find docs -name "*.md" -exec sh -c '
            for file do
              html_file="${file%.md}.html"
              marked "$file" > "$html_file"
            done
          ' sh {} +

          # Convert root README
          marked README.md > docs/README.html
          marked CLAUDE.md > docs/CLAUDE.html

      - name: Setup Pages
        if: github.ref == 'refs/heads/main'
        uses: actions/configure-pages@v4

      - name: Upload to GitHub Pages
        if: github.ref == 'refs/heads/main'
        uses: actions/upload-pages-artifact@v2
        with:
          path: 'docs'

  deploy-pages:
    if: github.ref == 'refs/heads/main'
    needs: generate-docs
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v3

  quality-checks:
    name: Documentation Quality Checks
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '24'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Check documentation completeness
        run: |
          # Create a script to check documentation coverage
          cat > check-docs.js << 'EOF'
          const fs = require('fs');
          const path = require('path');

          function findTSFiles(dir) {
            const files = [];
            const entries = fs.readdirSync(dir, { withFileTypes: true });

            for (const entry of entries) {
              const fullPath = path.join(dir, entry.name);
              if (entry.isDirectory() && !entry.name.includes('node_modules')) {
                files.push(...findTSFiles(fullPath));
              } else if (entry.isFile() && entry.name.endsWith('.ts')) {
                files.push(fullPath);
              }
            }
            return files;
          }

          function checkDocumentation() {
            const sourceFiles = findTSFiles('./src');
            const issues = [];

            for (const file of sourceFiles) {
              const content = fs.readFileSync(file, 'utf8');

              // Check for public classes without documentation
              const classMatches = content.match(/export class \w+/g);
              if (classMatches) {
                for (const match of classMatches) {
                  const className = match.replace('export class ', '');
                  if (!content.includes(`/**`) || !content.includes(`* ${className}`)) {
                    issues.push(`${file}: Class ${className} lacks documentation`);
                  }
                }
              }

              // Check for public methods without documentation
              const methodMatches = content.match(/public \w+\([^)]*\):/g);
              if (methodMatches && methodMatches.length > 3) { // Only flag files with many public methods
                issues.push(`${file}: Consider documenting public methods`);
              }
            }

            if (issues.length > 0) {
              console.log('Documentation issues found:');
              issues.forEach(issue => console.log(`- ${issue}`));
              console.log(`\nTotal issues: ${issues.length}`);

              // Don't fail the build, just warn
              console.log('\nNote: These are recommendations to improve documentation coverage.');
            } else {
              console.log('‚úÖ Documentation coverage looks good!');
            }
          }

          checkDocumentation();
          EOF

          node check-docs.js

      - name: Validate OpenAPI specification
        run: |
          # Install OpenAPI tools
          npm install -g @apidevtools/swagger-parser

          # Validate the OpenAPI spec
          swagger-parser validate docs/api/openapi.yaml

      - name: Check for broken links
        run: |
          # Install link checker
          npm install -g markdown-link-check

          # Check links in documentation files
          find docs -name "*.md" -exec markdown-link-check {} \; || true
          markdown-link-check README.md || true

      - name: Security scan of documentation
        run: |
          # Check for sensitive information in docs
          echo "Scanning for sensitive information..."

          # Look for common patterns that shouldn't be in docs
          if grep -r -i "password\|secret\|token\|api_key" docs/ --exclude-dir=node_modules; then
            echo "‚ö†Ô∏è  Warning: Found potential sensitive information in documentation"
            echo "Please review the above matches and ensure no real secrets are exposed"
          else
            echo "‚úÖ No sensitive information found in documentation"
          fi

  notify-completion:
    name: Notify Documentation Update
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    needs: [generate-docs, deploy-pages]
    runs-on: ubuntu-latest

    steps:
      - name: Notify documentation update
        run: |
          echo "üìö Documentation has been updated and deployed!"
          echo "üîó View at: https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/"

          # If you have Slack/Discord webhooks, you can notify there too
          # curl -X POST -H 'Content-type: application/json' \
          #   --data '{"text":"üìö Documentation updated for ${{ github.repository }}"}' \
          #   ${{ secrets.SLACK_WEBHOOK_URL }}